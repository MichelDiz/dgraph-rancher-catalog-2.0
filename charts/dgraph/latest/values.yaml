#Todo
# Add ACL + Add metrics or try to run Grafana Stack in same context

## Dgraph image version
## ref: https://hub.docker.com/r/dgraph/dgraph/
image:
  repository: dgraph-io/dgraph
  tag: "latest"
  pullPolicy: IfNotPresent
  ## Specify ImagePullSecrets for Pods
  ## ref: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
  # pullSecrets: myregistrykey

## Specify a service type
## ref: http://kubernetes.io/docs/user-guide/services/
# service:
#   type: ClusterIP
service:
  loadBalancer:
    enabled: false
  clusterIP:
    enabled: false
    #ip:
  nodePort:
    enabled: false
  ingress:
    enabled: false
    host: dgraph.default.svc

DgraphSeparator: ":"
DgraphMemory: "--lru_mb"

DgraphAlpha:
  enabled: true
  command: "dgraph alpha --my="
  commandtoZero: "--zero"

DgraphZero:
  enabled: true
  command: "dgraph zero --my="

Ratel:
  enabled: true
  command: "dgraph-ratel"

  # {{ if .Values.Ratel.enabled }}
  #   {{ default "none" .Values.Ratel.name }}
  # {{ end }}

## Persist data to a persitent volume
## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
# persistence:
#   enabled: true
#   storageClass: default
#   ## The location within the Dgraph container
#   ## store its posting list and wall logs.
#   ##
#   mountPath: "/dgraph"
#   bindHostEnabled: false
#   accessMode: ReadWriteOnce

## Kubernetes configuration
## For minikube, set this to NodePort, elsewhere use LoadBalancer or ClusterIP
##
#serviceType: LoadBalancer
##
## serviceType: NodePort
## nodePorts:
##   http: <to set explicitly, choose port between 30000-32767>
##   https: <to set explicitly, choose port between 30000-32767>
# nodePorts:
#   http: ""
#   https: ""
## Enable client source IP preservation
## ref http://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
##
 serviceExternalTrafficPolicy: Cluster

## Allow health checks to be pointed at the https port
healthcheckHttps: false

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
## Minimum memory for development is 4GB and 2 CPU cores
## Minimum memory for production is 8GB and 4 CPU cores
resources:
  requests:
    memory: 14Gi
    cpu: 2
  limits:
    memory: 14Gi
    cpu: 2

## Configure extra options for liveness and readiness probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
livenessProbe:
  initialDelaySeconds: 120
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1
readinessProbe:
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

terminationGracePeriodSeconds: 30

# ingress:
#   enabled: false
#   annotations: {}
#     # kubernetes.io/ingress.class: nginx
#     # kubernetes.io/tls-acme: "true"
#   path: /
#   hosts:
#     - chart-example.local
#   tls: []
#   #  - secretName: chart-example-tls
#   #    hosts:
#   #      - chart-example.local

config:
  cluster_name: Dgraph
  cluster_size: 3
  seed_size: 2
  num_tokens: 256
  dc_name: DC1
  rack_name: RAC1
  endpoint_snitch: SimpleSnitch
  max_heap_size: 2048M
  heap_new_size: 512M
  start_rpc: false
  ports:
    cql: 9042
    thrift: 9160
    # If a JVM Agent is in place
    # agent: 61621

## Configure node selector. Edit code below for adding selector to pods
## ref: https://kubernetes.io/docs/user-guide/node-selection/
# selector:
  # nodeSelector:
    # cloud.google.com/gke-nodepool: pool-db
nodeSelector: {}

tolerations: []

## Additional pod labels
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podManagementPolicy: Parallel #OrderedReady
updateStrategy:
  type: OnDelete

## Pod Security Context
securityContext:
  enabled: false
  fsGroup: 999
  runAsUser: 999

## Affinity for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
affinity: {}
